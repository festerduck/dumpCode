#include <iostream>
#include <stdlib.h>
using namespace std;

struct computePay
{
	float
		medicalAllow = 0.0,
		houseRent = 0.0,
		conveyAllow = 0.0,
		payNet = 0.0;
};

struct employeeData
{
	string
		employee_id,
		employee_name,
		address,
		phone;
	float	
		basicSalary;
	computePay netPay;
	employeeData* nptr;
};

employeeData* fptr = NULL;

string localId;
int index = 1;

void newLine()
{
	cout << "<<<----------------------------------------------------->>>" << endl;
}
void enterData();
int checkId();
int addNode();
int displayData();
int computeNet();
int displayPay();
int main()
{
	while (1)
	{
		newLine();
		index = 0;
		cout 
			<< "1. Enter Employee Data" << endl
			<< "2. Check existence of Employee in database(Search by Emp Id)" << endl
			<< "3. Compute the Allowances and Net Pay of Employee(User to enter Emp Id)" << endl
			<< "4. Show entire database(Display all records)" << endl;
		int opt;
		cin >> opt;
		cin.clear();
		cin.ignore();
		switch (opt)
		{
		case 1:
		{
			enterData();
			break;
		}
		case 2:
		{
			if (checkId() == 0)
			{
				cout << "Employee Not Found." << endl;
				system("PAUSE");
				system("CLS");
			}
			break;
		}
		case 3:
		{
			computeNet();
			system("PAUSE");
			system("CLS");
			break;
		}
		case 4:
		{
			displayData();
			break;
		}
		default:
			break;
		}
		//newLine();
	}
}
void enterData()
{
	cout << "<<--------------ENTERING EMPLOYEE DATA-------------->>" << endl;
	int idReturn = 1, flag = 0;
	idReturn = checkId();
	if (idReturn == 0)
	{
		employeeData* ptr = new employeeData;
		ptr->employee_id = localId;
		cout << endl << "Enter Employee Name: ";
		cin >> ptr->employee_name;
		cout << endl << "Enter Employee Address: ";
		cin >> ptr->address;
		cout << endl << "Enter Employee Phone: ";
		cin >> ptr->phone;
		cout << endl << "Enter Employee Basic Pay: ";
		cin >> ptr->basicSalary;
		flag = 1;
		cin.clear();
		cin.ignore();
		cout << endl;

		if (fptr == NULL)
		{
			ptr->nptr = NULL;
			fptr = ptr;
		}
		else
		{
			employeeData* currentPtr = fptr;
			while (currentPtr->nptr != NULL)
			{
				currentPtr = currentPtr->nptr;
			}
			currentPtr->nptr = ptr;
			ptr->nptr = NULL;
		}
	}
	if (flag == 1)
	{
		cout << "Data has been Successfully Entered." << endl;
		newLine();
	}
	system("PAUSE");
	system("CLS");
}
int checkId()
{
	int flag = 0;
	cout << "Enter Employee ID: ";
	cin >> localId;
	employeeData* checkPtr = fptr;
	while (checkPtr != NULL)
	{
		if (checkPtr->employee_id == localId)
		{
			cout << "Employee Exists As: " << checkPtr->employee_name << endl;
			
			return 1;
		}
		checkPtr = checkPtr->nptr;
		flag++;
		index++;
	}
	return 0;
}

int computeNet()
{
	int idCheck = checkId(), count = 0;
	if (idCheck == 0)
	{
		cout << "Employee not found." << endl;
		return 0;
	}
	employeeData* computePtr = fptr;
	while (computePtr != NULL)
	{
		computePtr->netPay.medicalAllow = 0.05 * computePtr->basicSalary;
		computePtr->netPay.houseRent = 0.45 * computePtr->basicSalary;
		computePtr->netPay.conveyAllow = 0.10 * computePtr->basicSalary;
		computePtr->netPay.payNet =
			computePtr->basicSalary +
			computePtr->netPay.medicalAllow +
			computePtr->netPay.houseRent +
			computePtr->netPay.conveyAllow;
		computePtr = computePtr->nptr;
	}
	displayPay();
	return 0;
}

int displayPay()
{
	employeeData* computePtr = fptr;
	while (computePtr != NULL)
	{
		if (computePtr->employee_id == localId)
		{
			cout << "Employee ID: " << computePtr->employee_id << endl
				<< "Basic Salary: " << computePtr->basicSalary << endl
				<< "\tMedical Allowance: " << computePtr->netPay.medicalAllow << endl
				<< "\tHouse Rent: " << computePtr->netPay.houseRent << endl
				<< "\tConveyance Allowance: " << computePtr->netPay.conveyAllow << endl
				<< "\tNET SALARY OF THE EMPLOYEE: " << computePtr->netPay.payNet << endl;
			return 1;
		}
		computePtr = computePtr->nptr;
	}
	system("PAUSE");
	system("CLS");
	return 0;
	
}

int displayData()
{
	employeeData* displayPtr = fptr;
	while (displayPtr != NULL)
	{
		cout
			<< "\tEmployee ID: " << displayPtr->employee_id << endl
			<< "\tEmployee Name: " << displayPtr->employee_name << endl
			<< "\tEployee Adress: " << displayPtr->address << endl
			<< "\tEmployee Phone: " << displayPtr->phone << endl
			<< "\tEmployee Basic Salary: " << displayPtr->basicSalary << endl;
		cout << "++++++++++++++++++++++++++++++++++++++++++++" << endl;
		displayPtr = displayPtr->nptr;
	}
	system("PAUSE");
	system("CLS");
	return 0;
}
